{
	"info": {
		"_postman_id": "493a7dbf-f617-4bc3-a195-71ee9ee9cfc8",
		"name": "API Agendamento ClickAtivo",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25477242"
	},
	"item": [
		{
			"name": "(GET) Mostra usuÃ¡rios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"url": {
					"raw": "http://localhost:3005/private/account",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"account"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "(GET) Mostra usuÃ¡rios Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "agendamento"
					}
				],
				"url": {
					"raw": "http://localhost:3005/private/account",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"account"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "(GET) Mostrar Funcionarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"url": {
					"raw": "http://localhost:3005/private/accountEmployers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"accountEmployers"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "(GET) Mostrar Especialidades por barbeiro",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"url": {
					"raw": "http://localhost:3005/private/barbeiro-especialidade/especialidades/c5e37d84-62f2-431a-b9c4-6df822ae8c31",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"barbeiro-especialidade",
						"especialidades",
						"c5e37d84-62f2-431a-b9c4-6df822ae8c31"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Atualizar UsuÃ¡rio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "agendamento"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"password\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/private/updateAccount/2349b32c-6676-4eaf-ac0c-d44297fc6e7e",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"updateAccount",
						"2349b32c-6676-4eaf-ac0c-d44297fc6e7e"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Cadastrar UsuÃ¡rio",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"jassapedro@gmail.com\",\r\n    \"name\": \"Jassa Pedro\",\r\n    \"password\": \"12345678\",\r\n    \"data_nascimento\": \"13/05/1995\",\r\n    \"tipo_usuario\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/registerUsers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"registerUsers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cadastrar UsuÃ¡rio Funcionario",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"funcionarioemail@gmail.com\",\r\n    \"name\": \"funcionariozinho\",\r\n    \"cpf\": \"12345678910\",\r\n    \"password\": \"funcionario\",\r\n    \"data_nascimento\": \"10/05/1989\",\r\n    \"telefone\": \"99999-9999\",\r\n    \"endereco\": {\r\n        \"rua\": \"Rua do roldofo\",\r\n        \"numero\": 365,\r\n        \"bairro\": \"Bairro do Acha\"\r\n    },\r\n    \"tipo_usuario\": 2,\r\n    \"cras\": 3,\r\n    \"ativo\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/registerUsers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"registerUsers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"joao@barbearia.com\",\r\n    \"password\": \"barbeiro123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cria Agendamento",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cliente_id\": \"c7961e78-921b-40c1-83a9-2a0fb9dd8909\",\r\n    \"barbeiro_id\": \"31e2a59f-f3d9-40db-92a8-2f6e5a983c8e\",\r\n    \"data_hora\": \"2025-07-25T14:00:00\",\r\n    \"status\": \"pendente\",\r\n    \"especialidade_id\": \"5e7df9b8-7408-4caa-b3c7-6c8fcee0b945\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/private/registerScheduling",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"registerScheduling"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cria especialidade",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"barbeiro_id\":\"c5e37d84-62f2-431a-b9c4-6df822ae8c31\",\r\n    \"nome\":\"Moicano Spike\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/private/especialidades",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"especialidades"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cria especialidade para o barbeiro",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"barbeiro_id\":\"c5e37d84-62f2-431a-b9c4-6df822ae8c31\",\r\n    \"especialidade_id\":\"954565f9-a1e6-48cb-a1d4-3c2e6f2d44a9\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/private/barbeiro-especialidade",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"barbeiro-especialidade"
					]
				}
			},
			"response": []
		},
		{
			"name": "(GET) Mostra Agendamentos",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "AUTHORIZATION",
						"value": "grandeSegredo"
					}
				],
				"url": {
					"raw": "http://localhost:3005/private/scheduling",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"private",
						"scheduling"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}